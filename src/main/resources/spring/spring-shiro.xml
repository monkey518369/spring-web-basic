<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"
       default-lazy-init="true">

    <description>Shiro Configuration</description>

    <bean name="shiroCacheManager" class="com.monkey.util.shiro.cache.CacheManageWraper">
        <property name="cacheManager" ref="cacheManager"></property>
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- 使用默认的autenticator,此处可不配置，配置的也是默认的 -->
        <property name="authenticator" ref="authenticator"></property>
        <property name="authorizer" ref="authorizer"></property>
        <property name="sessionManager" ref="sessionManager"></property>
        <property name="cacheManager" ref="shiroCacheManager"></property>
        <property name="realms">
            <list>
                <ref bean="loginRealm"></ref>
                <!--<ref bean="authRealm"></ref>-->
            </list>
        </property>
    </bean>

    <!-- 項目自定义的Realm -->
    <bean id="loginRealm" class="com.monkey.util.shiro.realm.MyLoginRealm" >
        <!-- 缓存AuthenticationInfo信息的缓存名称 -->
        <property name="authenticationCacheName" value="authenticationCache"/>
        <!-- 缓存AuthorizationInfo信息的缓存名称 -->
        <property name="authorizationCacheName" value="authorizationCache"/>
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <!-- hash算法 -->
                <property name="hashAlgorithmName" value="md5"></property>
                <!-- 迭代次数 -->
                <property name="hashIterations" value="2"></property>
                <!-- 编码，true=hex false=base64 -->
                <property name="storedCredentialsHexEncoded" value="false"></property>
            </bean>
        </property>
    </bean>
    <bean id="authRealm" class="com.monkey.util.shiro.realm.MyAuthRealm" ></bean>

    <!-- 认证 -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!-- 配置 strategy 此处使用的是默认的strategy ，还可实现自己的strategy或者其他已经实现的strateegy -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
        <!-- 为authentictor配置realm ，若securityManger也配置了realm则此处不生效 -->
        <property name="realms">
            <list>
                <ref bean="authRealm"></ref>
            </list>
        </property>
    </bean>

    <!-- 授权 -->
    <bean id="authorizer" class="org.apache.shiro.authz.ModularRealmAuthorizer">
        <!--<property name="permissionResolver">
            <bean></bean>
        </property>-->
    </bean>

    <!-- 密码校验 -->

    <!-- Shiro Filter -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="/index" />
        <property name="successUrl" value="/backstage/index" />
        <property name="unauthorizedUrl" value="/index" />
        <!-- anon:匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤
        authc:如果没有登录会跳到相应的登录页面登录
        user:用户拦截器，用户已经身份验证/记住我登录的都可 -->
        <property name="filterChainDefinitions">
            <value>
                /druid				                     = anon
                /login/**                                 = anon
                /static/**                                = anon
                /assets/**                                = anon
                /**							             = authc
            </value>
        </property>
    </bean>

    <!-- AOP式方法级权限检查 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true" />
    </bean>

    <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!-- shiro的session管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="globalSessionTimeout" value="3600000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
        <property name="sessionDAO" ref="sessionDao"></property>
        <property name="cacheManager" ref="shiroCacheManager"></property>
        <property name="sessionListeners">
            <list>
                <bean class="com.monkey.util.shiro.listener.MySessionListener"></bean>
            </list>
        </property>
    </bean>

    <bean name="sessionDao" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="cacheManager" ref="shiroCacheManager"></property>
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"></property>
    </bean>

    <!-- 会话验证调度器-->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <property name="interval" value="3600000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话生成器-->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>


    <!--会话Cookie模板-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>

</beans>